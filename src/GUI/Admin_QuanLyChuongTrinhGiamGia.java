/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI;
import DAOImpl.DiscountDAOImpl;
import Entity.Discount;
import Controller.CrudController;
import Controller.InitForm;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.sql.Connection;
import java.sql.*;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import utils.Auth;
import utils.MessageBox;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import javax.swing.event.ListSelectionEvent;
import javax.swing.text.html.parser.Entity;
import utils.Jdbc;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.lang.reflect.Method;

/**
 *
 * @author thing
 */
public class Admin_QuanLyChuongTrinhGiamGia extends javax.swing.JFrame {
    private DiscountDAOImpl daoImpl = new DiscountDAOImpl();
    int row = -1;
    /**
     * Creates new form ChuongTrinhGiamGia
     */
    
    public Admin_QuanLyChuongTrinhGiamGia() {
        initComponents();
    }
    public void initialize(){
            this.setLocationRelativeTo(null); // Vị trí cs trung tâm màn hình
            fillDiscountTable(); // Fill dl lên bảng
            updateDiscount();  // Gọi phương thức khi nhấn nút cập nhật
            deleteDiscount();  // Gọi phương thức khi nhấn xóa
            updateStatus(); // Cập nhật bảng discountTable
            saveDiscount(); // Lưu dl mới
        }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnGroupDescription = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        discountTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtidDiscount = new javax.swing.JTextField();
        txtnameDiscount = new javax.swing.JTextField();
        txtdateStart = new javax.swing.JTextField();
        txtcondition = new javax.swing.JTextField();
        txtnote = new javax.swing.JTextField();
        btnLuu = new javax.swing.JButton();
        jCheckBox1 = new javax.swing.JCheckBox();
        jLabel8 = new javax.swing.JLabel();
        txtdiscountPercentage = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        txtdateEnd = new javax.swing.JTextField();
        txtdelete = new javax.swing.JTextField();
        txtupdate = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        btnDelete1 = new javax.swing.JButton();
        rdoActive = new javax.swing.JRadioButton();
        rdoInactive = new javax.swing.JRadioButton();
        btnclearForm = new javax.swing.JButton();
        jCheckBox2 = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("ChuongTrinhGiamGia");

        discountTable.setAutoCreateRowSorter(true);
        discountTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã giảm giá", "Ngày bắt đầu", "Ngày kết thúc", "Tên chương trình", "Điều kiện", "Phần trăm giảm", "Trạng thái", "Ghi chú"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        discountTable.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                discountTableAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        discountTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                discountTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(discountTable);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 0, 0));
        jLabel1.setText("Danh sách chương trình giảm giá");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 0, 0));
        jLabel2.setText("Quản lý chương trình giảm giá");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel3.setText("Mã giảm giá:");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel4.setText("Ngày bắt đầu:");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel5.setText("Tên chương trình giảm giá:");

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel6.setText("Điều kiện:");

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel7.setText("Ghi chú:");

        btnLuu.setBackground(new java.awt.Color(0, 204, 0));
        btnLuu.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        btnLuu.setForeground(new java.awt.Color(255, 255, 255));
        btnLuu.setText("Thêm");
        btnLuu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLuuActionPerformed(evt);
            }
        });

        jCheckBox1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jCheckBox1.setText("Xác nhận");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel8.setText("Ngày kết thúc:");

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        jLabel9.setText("Nhập mã giảm giá muốn xóa:");

        jLabel10.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel10.setText("Phần trăm giảm:");

        txtdelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtdeleteActionPerformed(evt);
            }
        });

        txtupdate.setBackground(new java.awt.Color(255, 255, 0));
        txtupdate.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        txtupdate.setText("Cập nhật");
        txtupdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtupdateActionPerformed(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel12.setText("Trạng thái:");

        btnDelete1.setBackground(new java.awt.Color(255, 0, 0));
        btnDelete1.setFont(new java.awt.Font("Segoe UI", 1, 17)); // NOI18N
        btnDelete1.setForeground(new java.awt.Color(255, 255, 255));
        btnDelete1.setText("XÓA");
        btnDelete1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDelete1ActionPerformed(evt);
            }
        });

        btnGroupDescription.add(rdoActive);
        rdoActive.setText("Hoạt động");
        rdoActive.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoActiveActionPerformed(evt);
            }
        });

        btnGroupDescription.add(rdoInactive);
        rdoInactive.setSelected(true);
        rdoInactive.setText("Không hoạt động");
        rdoInactive.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoInactiveActionPerformed(evt);
            }
        });

        btnclearForm.setBackground(new java.awt.Color(0, 0, 0));
        btnclearForm.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnclearForm.setForeground(new java.awt.Color(255, 255, 255));
        btnclearForm.setText("Làm sạch form");
        btnclearForm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnclearFormActionPerformed(evt);
            }
        });

        jCheckBox2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jCheckBox2.setText("Xác nhận");
        jCheckBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(159, 159, 159)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 389, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(281, 281, 281)
                        .addComponent(jLabel2))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 754, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel8)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel10)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel12)
                                    .addComponent(btnclearForm))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(rdoActive, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(27, 27, 27)
                                        .addComponent(rdoInactive))
                                    .addComponent(txtdateEnd)
                                    .addComponent(txtidDiscount, javax.swing.GroupLayout.DEFAULT_SIZE, 302, Short.MAX_VALUE)
                                    .addComponent(txtdateStart, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(txtdiscountPercentage, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(txtnote, javax.swing.GroupLayout.DEFAULT_SIZE, 302, Short.MAX_VALUE)
                                    .addComponent(txtnameDiscount, javax.swing.GroupLayout.DEFAULT_SIZE, 302, Short.MAX_VALUE)
                                    .addComponent(txtcondition, javax.swing.GroupLayout.DEFAULT_SIZE, 302, Short.MAX_VALUE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jCheckBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnLuu, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(15, 15, 15)
                                        .addComponent(txtupdate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jCheckBox2)
                                        .addGap(18, 18, 18)
                                        .addComponent(btnDelete1, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(txtdelete, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addContainerGap(95, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(txtidDiscount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(txtdateStart, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtdateEnd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(txtnameDiscount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtcondition)
                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtdiscountPercentage)
                            .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(rdoActive)
                            .addComponent(rdoInactive))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtnote, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jCheckBox1)
                            .addComponent(btnclearForm)
                            .addComponent(btnLuu)
                            .addComponent(txtupdate, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(31, 31, 31)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtdelete, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jCheckBox2)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnDelete1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(1, 1, 1)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 403, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnLuuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLuuActionPerformed
            if (jCheckBox1.isSelected()) {
                saveDiscount();  
            } else {
            // Hiển thị thông báo nếu checkbox chưa được tích chọn
            JOptionPane.showMessageDialog(this, "Vui lòng xác nhận lại thông tin trước khi thêm dữ liệu.");
            }
    }//GEN-LAST:event_btnLuuActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        // TODO add your handling code here:;
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void discountTableAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_discountTableAncestorAdded
        // TODO add your handling code here:
        updateStatus();
        fillDiscountTable();
    }//GEN-LAST:event_discountTableAncestorAdded

    private void txtdeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtdeleteActionPerformed

    }//GEN-LAST:event_txtdeleteActionPerformed

    private void txtupdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtupdateActionPerformed
           if (jCheckBox1.isSelected()) {
               updateDiscount();  // Gọi phương thức cập nhật
            } else {
            // Hiển thị thông báo nếu checkbox chưa được tích chọn
            JOptionPane.showMessageDialog(this, "Vui lòng xác nhận lại thông tin trước khi cập nhật dữ liệu.");
            }

    }//GEN-LAST:event_txtupdateActionPerformed

    private void btnDelete1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDelete1ActionPerformed
        deleteDiscount();
    }//GEN-LAST:event_btnDelete1ActionPerformed

    private void rdoActiveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoActiveActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rdoActiveActionPerformed

    private void rdoInactiveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoInactiveActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rdoInactiveActionPerformed

    private void discountTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_discountTableMouseClicked
        discountTable.addMouseListener(new MouseAdapter() {
         @Override
         public void mouseClicked(MouseEvent e) {
             int selectedRow = discountTable.getSelectedRow(); // Lấy chỉ số dòng được chọn
             if (selectedRow >= 0) {
                 loadDiscountToForm(selectedRow); // Gọi phương thức để load dữ liệu vào form
             }
         }
        });
    }//GEN-LAST:event_discountTableMouseClicked

    private void btnclearFormActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnclearFormActionPerformed
             // TODO add your handling code here:
             btnclearForm.addActionListener(e -> clearForm());
    }//GEN-LAST:event_btnclearFormActionPerformed

    private void jCheckBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Admin_QuanLyChuongTrinhGiamGia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Admin_QuanLyChuongTrinhGiamGia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Admin_QuanLyChuongTrinhGiamGia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Admin_QuanLyChuongTrinhGiamGia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Admin_QuanLyChuongTrinhGiamGia().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDelete1;
    private javax.swing.ButtonGroup btnGroupDescription;
    private javax.swing.JButton btnLuu;
    private javax.swing.JButton btnclearForm;
    private javax.swing.JTable discountTable;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JRadioButton rdoActive;
    private javax.swing.JRadioButton rdoInactive;
    private javax.swing.JTextField txtcondition;
    private javax.swing.JTextField txtdateEnd;
    private javax.swing.JTextField txtdateStart;
    private javax.swing.JTextField txtdelete;
    private javax.swing.JTextField txtdiscountPercentage;
    private javax.swing.JTextField txtidDiscount;
    private javax.swing.JTextField txtnameDiscount;
    private javax.swing.JTextField txtnote;
    private javax.swing.JButton txtupdate;
    // End of variables declaration//GEN-END:variables
    // Khởi tạo ds discountList chứa đối tượng discount
    private List<Discount> discountList = new ArrayList<>();

    // 1. THÊM (CREATE)
    private void saveDiscount(){
        // Kiểm tra dữ liệu đầu vào
        if (!validateInput()) {
            return; // Dừng nếu có trường nào trống
        }
        // Lấy thông tin từ admin
        String idDiscount = txtidDiscount.getText();
        String dateStart = txtdateStart.getText();
        String dateEnd = txtdateEnd.getText();
        String nameDiscount = txtnameDiscount.getText();  
        String condition = txtcondition.getText();
        String discountPercentage =txtdiscountPercentage.getText();
        // Lấy giá trị từ Button Group (description)
        String description;
        if (rdoActive.isSelected()) {
            description = "Hoạt động";
        } else if (rdoInactive.isSelected()) {
            description = "Không hoạt động";
        } else {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn trạng thái!");
            return; // Ngừng nếu chưa chọn trạng thái
        }
         String note = txtnote.getText();
        //Tạo đối tượng Discount
        Discount discount = new Discount(idDiscount, dateStart, dateEnd, nameDiscount, condition, discountPercentage, description, note);
        //Thêm đối tượng discount vào ds tạm discountList
         discountList.add(discount);
        //Lấy danh sách từ CSDL
        fillDiscountTable();
        // Lưu dữ liệu mới vào database
        insertData(discount);
        // Cập nhật cho bảng discountTable
        updateStatus();
        // Làm trắng form
        clearForm();
    }
    
    // Lưu dữ liệu người dùng mới nhập vào database
    private void insertData(Discount discount) {
    DiscountDAOImpl discountDAO = new DiscountDAOImpl(); // Tạo đối tượng DAO
    try {
        discountDAO.insertData(discount);  // Gọi phương thức insertData trong DAO
        JOptionPane.showMessageDialog(this, "Thêm mới thông tin giảm giá thành công!");
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Lỗi khi thêm mới dữ liệu: " + e.getMessage());
        e.printStackTrace();
    }
    }

    // Cập nhật cho bảng discountTable
    private void updateStatus() {
    DefaultTableModel model = (DefaultTableModel) discountTable.getModel();
    //model.setRowCount(0); // Xóa các dòng cũ
    for (int i = 0; i < discountList.size(); i++){
        Discount discount = discountList.get(i);
        model.addRow(new Object[]{
            //i + 1, -> Đếm số lượng
            discount.getIdDiscount(),
            discount.getDateStart(),
            discount.getDateEnd(),
            discount.getNameDiscount(),
            discount.getCondition(),
            discount.getDiscountPercentage(),
            discount.getDescription(),
            discount.getNote()
        });
        }
    }

    // 2. XEM (READ)
    // Lấy dữ liệu
    private List<Discount> getDiscount() {
        List<Discount> discounts = daoImpl.getAllData();
    return daoImpl.getAllData();
    }
    // Sau khi lấy dl -> đưa lên bảng
    public void fillDiscountTable() {
        // Lấy danh sách discount trong CSDL từ getDiscount ở trên
        List<Discount> discounts = getDiscount();
        // Tạo DefaultTableModel với các tên cột tương ứng và ghi đè isCellEditable
        DefaultTableModel model = new DefaultTableModel(new Object[]{
        "Mã giảm giá", "Ngày bắt đầu", "Ngày kết thúc", "Tên chương trình",
        "Điều kiện", "Phần trăm giảm", "Trạng thái", "Ghi chú"
        }, 0) {
        @Override
        public boolean isCellEditable(int row, int column) {
            return false; // Tất cả các ô không thể chỉnh sửa
        }
        };
        // Thêm dữ liệu vào bảng
        for (Discount discount : discounts) {
            model.addRow(new Object[]{
                discount.getIdDiscount(),
                discount.getDateStart(),
                discount.getDateEnd(),
                discount.getNameDiscount(),
                discount.getCondition(),
                discount.getDiscountPercentage(),
                discount.getDescription(),
                discount.getNote()
            });
        }
        // Gán model cho bảng discountTable
        discountTable.setModel(model);
    }
    
    // 3. SỬA (UPDATE)
    // Phương thức khi nhấn nút Sửa
    private void updateDiscount() {
        String idDiscountToUpdate = txtidDiscount.getText().trim();  // Lấy ID mã giảm giá người dùng nhập vào
        // Kiểm tra xem người dùng đã nhập ID chưa
        if (idDiscountToUpdate.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Vui lòng nhập mã giảm giá cần sửa.");
            return;
        }
        // Kiểm tra xem mã giảm giá có tồn tại trong CSDL không
        if (!checkIfDiscountExists(idDiscountToUpdate)) {
            JOptionPane.showMessageDialog(this, "Mã giảm giá không tồn tại.");
            return;
        }
        // Lấy các giá trị mới từ các trường nhập liệu
        String dateStart = txtdateStart.getText();
        String dateEnd = txtdateEnd.getText();
        String nameDiscount = txtnameDiscount.getText();
        String condition = txtcondition.getText();
        String discountPercentage = txtdiscountPercentage.getText();
         // Lấy giá trị từ Button Group (description)
        String description;
        if (rdoActive.isSelected()) {
            description = "Hoạt động";
        } else if (rdoInactive.isSelected()) {
            description = "Không hoạt động";
        } else {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn trạng thái!");
            return;
        }
        String note = txtnote.getText();
        // Cập nhật dữ liệu vào cơ sở dữ liệu
        updateData(idDiscountToUpdate, dateStart, dateEnd, nameDiscount, condition, discountPercentage, description, note);
        // Làm trắng form
        clearForm();
        // Cập nhật lại bảng sau khi sửa
        fillDiscountTable();
}
    // Kiểm tra xem mã giảm giá có tồn tại trong CSDL không
    private boolean checkIfDiscountExists(String idDiscount) {
        DiscountDAOImpl discountDAO = new DiscountDAOImpl(); // Khởi tạo DAO
        Discount discount = discountDAO.getDataById(idDiscount); // Gọi phương thức getDataById
        return discount != null; // Kiểm tra nếu khác null thì tồn tại
    }

    // Cập nhật Discount vào database
    // Phương thức nhận 8 tham số
    private void updateData(String idDiscount, String dateStart, String dateEnd, String nameDiscount,
                            String condition, String discountPercentage, String description, String note) {
        // Tạo đối tượng Discount với gói tất cả thông tin từ các tham số
        Discount discount = new Discount(idDiscount, dateStart, dateEnd, nameDiscount, condition, discountPercentage, description, note);
        // Tạo đối tượng DiscountDAOImpl
        DiscountDAOImpl discountDAO = new DiscountDAOImpl();
        try {
            // Gọi phương thức updateData của DiscountDAOImpl để cập nhật dữ liệu, truyền vào đối tượng discount
            discountDAO.updateData(discount);
            JOptionPane.showMessageDialog(this, "Cập nhật thông tin giảm giá thành công!");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Lỗi khi cập nhật dữ liệu: " + e.getMessage());
        }
    }

    // 4. DELETE
    // Phương thức khi nhấn nút xóa
    private void deleteDiscount() {
    String idDiscountToDelete = txtdelete.getText().trim();  // Lấy mã giảm giá từ trường nhập liệu
    // Kiểm tra nếu trường nhập liệu rỗng
    if (idDiscountToDelete.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Vui lòng nhập mã giảm giá để xóa.");
        return;
    }
    // Kiểm tra mã giảm giá có tồn tại không
    if (!checkIfDiscountExists(idDiscountToDelete)) {
        JOptionPane.showMessageDialog(this, "Mã giảm giá không tồn tại.");  // Hiển thị thông báo nếu không tồn tại
        return;
    }
    // Kiểm tra checkbox xác nhận
    if (jCheckBox2.isSelected()) {
        // Thực hiện xóa bản ghi trong CSDL
        deleteById(idDiscountToDelete);
    } else {
        // Hiển thị thông báo nếu checkbox chưa được tích chọn
        JOptionPane.showMessageDialog(this, "Vui lòng xác nhận lại thông tin trước khi xóa dữ liệu.");
    }

    // Cập nhật lại bảng sau khi xóa
    fillDiscountTable();
    clearForm();
}


    //Xóa Discount trong database
    private void deleteById(String idDiscount) {
        DiscountDAOImpl discountDAO = new DiscountDAOImpl(); // Tạo đối tượng DAO
        try {
            discountDAO.deleteById(idDiscount);  // Gọi phương thức deleteById trong DAO
            JOptionPane.showMessageDialog(this, "Xóa thành công mã giảm giá: " + idDiscount);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Lỗi khi xóa dữ liệu: " + e.getMessage());
            e.printStackTrace();
        }
    }

    // Hiển thị dữ liệu của bảng lên form khi click chuột 1 dòng
    private void loadDiscountToForm(int rowIndex) {
        // Lấy model của bảng
        DefaultTableModel model = (DefaultTableModel) discountTable.getModel();
        // Lấy giá trị từ các cột tương ứng trong dòng được chọn
        String idDiscount = (String) model.getValueAt(rowIndex, 0);
        String dateStart = (String) model.getValueAt(rowIndex, 1);
        String dateEnd = (String) model.getValueAt(rowIndex, 2);
        String nameDiscount = (String) model.getValueAt(rowIndex, 3);
        String condition = (String) model.getValueAt(rowIndex, 4);
        String discountPercentage = (String) model.getValueAt(rowIndex, 5);
        String description = (String) model.getValueAt(rowIndex, 6);
        String note = (String) model.getValueAt(rowIndex, 7);
        // Gán các giá trị này vào các trường trên form
        txtidDiscount.setText(idDiscount);
        txtdateStart.setText(dateStart);
        txtdateEnd.setText(dateEnd);
        txtnameDiscount.setText(nameDiscount);
        txtcondition.setText(condition);
        txtdiscountPercentage.setText(discountPercentage);
        txtnote.setText(note);
        // Thiết lập radio button dựa trên trạng thái (description)
        if ("Hoạt động".equalsIgnoreCase(description)) {
            rdoActive.setSelected(true);
        } else if ("Không hoạt động".equalsIgnoreCase(description)) {
            rdoInactive.setSelected(true);
        }
    }
    // Làm trắng form sau khi nhập dl
    private void clearForm() {
        // Làm trống các trường nhập liệu
        txtidDiscount.setText("");
        txtdateStart.setText("");
        txtdateEnd.setText("");
        txtnameDiscount.setText("");
        txtcondition.setText("");
        txtdiscountPercentage.setText("");
        txtnote.setText("");
        txtdelete.setText("");
        // Bỏ chọn tất cả các radio button
        rdoActive.setSelected(false);
        rdoInactive.setSelected(false);
        jCheckBox1.setSelected(false);
        jCheckBox2.setSelected(false);
    }
    private boolean validateInput() {
        if (txtidDiscount.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Vui lòng nhập Mã giảm giá!");
            return false;
        }
        if (txtdateStart.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Vui lòng nhập Ngày bắt đầu!");
            return false;
        }
        if (txtdateEnd.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Vui lòng nhập Ngày kết thúc!");
            return false;
        }
        if (txtnameDiscount.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Vui lòng nhập Tên chương trình giảm giá!");
            return false;
        }
        if (txtcondition.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Vui lòng nhập Điều kiện giảm giá!");
            return false;
        }
        if (txtdiscountPercentage.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Vui lòng nhập Phần trăm giảm giá!");
            return false;
        }
        return true;
    }

}